// Moodle Database Activity Javascript Template Function
// Name: validateURL
// Description: Simply validates a URL by checking to see
// if it falls within expected URL standard formatting.
// Accepts a URL as an argument and returns true or false.
function validateURL(url) {
    var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    // Compare the URL with the pattern
    if (pattern.test(url)) {
        // Valid URL
        return true;
    }
    // Not a valid URL
    return false;
}

// Moodle Database Activity Javascript Template Function
// Name: assignmentName
// Description: This script formats the assignment name at the top of both
// the list view and the single view. It differs if the list is singular
// or plural. The name is pulled from the Database Activity name set by
// the user in Moodle.
function assignmentName() {
    // Grab the assignment name from the document
    var the_assignment = document.title;
    // Strip of the preceding course name
    the_assignment = the_assignment.substring(the_assignment.indexOf(':') + 1);
    var single_user = '';

    // Grab all usernames from the page.
    var users = document.getElementsByClassName('theUser');

    // Find out if this is all one user or if it is many users
    var is_same = true;
    for (var i = 0; i < users.length-1; i++) {
        if (users[i].innerHTML !== users[i+1].innerHTML) {
            is_same = false;
        }
    }

    // Add an "s" to the name of the assignment since there is more than one.
    if (users.length > 1) {
        the_assignment += 's';
    }

    // If the user is the same, report to who the assignment belongs
    if (is_same) {
        single_user = users[0].innerHTML;
        the_assignment += ' by ' + single_user;

        // Now blank out the user names in this screen since we
        // reported it in the assignment name line.
        for (var i = 0; i < users.length; i++) {
            users[i].innerHTML = '';
        }

    }

    // Lastly, replace the assignment name with our improved version.
    document.getElementById('assignmentplaceholder').innerHTML = the_assignment;
    document.getElementById('usersignature').innerHTML = single_user;
}

// Moodle Database Activity Javascript Template Function
// Name: formatBlogLinksSingle
// Description: Loops through all the URLs on the page and formats them
// with a title from the same line. (Doesn't shorten the title)
function formatBlogLinksSingle() {

    // Grab the URL and the title of posts
    var link = document.getElementById('thePostLink');
    var title = document.getElementById('thePostTitle');

    // Make sure we have an SSL connection
    var secure_link = link.childNodes[0].href;
    secure_link = secure_link.replace('http:', 'https:');
    link.childNodes[0].href = secure_link;

    // Verify the link and notify if it isn't valid!
    if (!validateURL(secure_link)) {
        title.innerHTML += ' <-- Invalid Link';
    }

    link.childNodes[0].innerHTML = title.innerHTML;
    title.innerHTML = '';
}

// Moodle Database Activity Javascript Template Function
// Name: formatEmbedCode
// Description: Takes in a A HREF URL and creates an EMBED code from it
// which is the return value.
function formatEmbedCode(url) {
    var embed_code = '<embed width="100%" height="300px" src="';
    embed_code += url.href;
    embed_code += '">';
    embed_code += '<br><b>Link:</b> ';
    embed_code += url.href;
    return embed_code.replace("http:", "https:");
}

// Moodle Database Activity Javascript Template Function
// Name: formatEmbedObjectsSingle
// Description: This script creates an embed object for a URL.
function formatEmbedObjectsSingle() {
    var link = document.getElementById('thePostLink').childNodes[0];
    document.getElementById('embedPostLocation').innerHTML = formatEmbedCode(link);
}

// Moodle Database Activity Javascript Template Function
// Name: formatPostCommentList
// Description: Changes the words Post/Comment to P/C
function formatPostCommentList() {
    // Grab all URL and all Titles of posts
    var pc = document.getElementsByClassName('postcomment');

    // Loop through and process post/comment.
    for (var i = 0; i < pc.length; i++) {
        var shorten = pc[i].innerHTML;
        pc[i].innerHTML = shorten.substring(0,1);
    }
}

// Moodle Database Activity Javascript Template Function
// Name: uniformDateTime prototype function
// Description: Format the date in a uniform method
// Format 1 - YYYY-Mon-DD (short month)
// Format 2 - HH:MM (time only)
// Format 3 - Day (short day only)
Date.prototype.uniformDateTime = function(format_requested) {
    var yyyy = this.getFullYear().toString();
    var MM = (this.getMonth()+1).toString();
    var dd  = this.getDate().toString();
    var hh = this.getHours().toString();
    var mm = this.getMinutes().toString();
    var ss = this.getSeconds().toString();

    // Make a short day
    var weekday = new Array(7);
    weekday[0] = "Sun";
    weekday[1] = "Mon";
    weekday[2] = "Tue";
    weekday[3] = "Wed";
    weekday[4] = "Thu";
    weekday[5] = "Fri";
    weekday[6] = "Sat";
    var shortDay = weekday[this.getDay()];

    // Make a short month
    var month = new Array(12);
    month[0] = "Jan";
    month[1] = "Feb";
    month[2] = "Mar";
    month[3] = "Apr";
    month[4] = "May";
    month[5] = "Jun";
    month[6] = "Jul";
    month[7] = "Aug";
    month[8] = "Sep";
    month[9] = "Oct";
    month[10] = "Nov";
    month[11] = "Dec";
    var shortMonth = month[this.getMonth()];

    // Returns the formatted result
    switch (format_requested) {
        case 1:
            // Just the date
            return yyyy + '-' + shortMonth + '-' + (dd[1]?dd:"0"+dd[0]);
            break;
        case 2:
            // Just the time
            return (hh[1]?hh:"0"+hh[0]) + ':' + (mm[1]?mm:"0"+mm[0]);
            break;
        case 3:
            // Just the short day
            return shortDay;
            break;
    }
    return this;
}

// Moodle Database Activity Javascript Template Function
// Name: formatDates
// Description: This script takes the Moodle Database Logged dates in a list
// view and counts the number of unique dates in the array. It uses the
// document attribute LANG to determine how to format the date. The end
// result should be dates and times formatted in a uniform way no matter
// what language you are using in Moodle.
function formatDates() {
    // Formatting depends entirely on the language. As new languages are
    // making use of this script, some changes may be needed to parse the
    // date.
    var doc_lang = document.documentElement.lang;

    // Get the system log date
    var some_datesadded = document.getElementsByClassName('dateadded');
    var some_timesadded = document.getElementsByClassName('timeadded');
    var some_daysadded = document.getElementsByClassName('dayadded');

    // Get the date logged by the user
    var some_datesreported = document.getElementsByClassName('datereported');
    var some_daysreported = document.getElementsByClassName('dayreported');

    // Non-English dates need this routine
    // ja 2018年 04月 12日(Thursday) 12:11
    // en Thursday, 12 April 2018, 12:11 PM
    // tw 2018年 04月 12日(Thu) 12:11
    // cn 2018年04月12日 Thursday 12:11
    // ko 2018년 April 12일, Thursday, PM 12:11
    if (doc_lang != "en") {
        replaceWords = ['年','']
        for (var i=0; i<some_datesadded.length; i++) {
            var worker = some_datesadded[i].innerHTML;
            worker = worker.replace(/[(年月日년일,)]/g, ' '); // Dice off characters
            worker = worker.replace(/AM/i, ' '); // Dice off AM
            worker = worker.replace(/PM/i, ' '); // Dice off PM
            worker = worker.replace(/Mon/i, ' '); // Dice days of the week
            worker = worker.replace(/Tue/i, ' '); // Dice days of the week
            worker = worker.replace(/Wed/i, ' '); // Dice days of the week
            worker = worker.replace(/Thu/i, ' '); // Dice days of the week
            worker = worker.replace(/Fri/i, ' '); // Dice days of the week
            worker = worker.replace(/Sat/i, ' '); // Dice days of the week
            worker = worker.replace(/Sun/i, ' '); // Dice days of the week
            worker = worker.replace(/nesday/i, ' '); // Dice days of the week
            worker = worker.replace(/urday/i, ' '); // Dice days of the week
            worker = worker.replace(/rsday/i, ' '); // Dice days of the week
            worker = worker.replace(/sday/i, ' '); // Dice days of the week
            worker = worker.replace(/day/i, ' '); // Dice days of the week
            some_datesadded[i].innerHTML = worker;

            var worker = some_datesreported[i].innerHTML;
            worker = worker.replace(/[(年月日년일,)]/g, ' '); // Dice off characters
            worker = worker.replace(/AM/i, ' '); // Dice off AM
            worker = worker.replace(/PM/i, ' '); // Dice off PM
            worker = worker.replace(/Mon/i, ' '); // Dice days of the week
            worker = worker.replace(/Tue/i, ' '); // Dice days of the week
            worker = worker.replace(/Wed/i, ' '); // Dice days of the week
            worker = worker.replace(/Thu/i, ' '); // Dice days of the week
            worker = worker.replace(/Fri/i, ' '); // Dice days of the week
            worker = worker.replace(/Sat/i, ' '); // Dice days of the week
            worker = worker.replace(/Sun/i, ' '); // Dice days of the week
            worker = worker.replace(/nesday/i, ' '); // Dice days of the week
            worker = worker.replace(/urday/i, ' '); // Dice days of the week
            worker = worker.replace(/rsday/i, ' '); // Dice days of the week
            worker = worker.replace(/sday/i, ' '); // Dice days of the week
            worker = worker.replace(/day/i, ' '); // Dice days of the week
            some_datesreported[i].innerHTML = worker.replace(/[(年月日년일),]/g, ' ');
        }
    }

    // Parse the date array and make it display uniformly.
    for (var i=0; i<some_datesadded.length; i++) {
        var a_date = new Date(some_datesadded[i].innerHTML);
        some_datesadded[i].innerHTML = a_date.uniformDateTime(1);
        some_timesadded[i].innerHTML = a_date.uniformDateTime(2);
        some_daysadded[i].innerHTML = a_date.uniformDateTime(3);
        var a_date = new Date(some_datesreported[i].innerHTML);
        some_datesreported[i].innerHTML = a_date.uniformDateTime(1);
        some_daysreported[i].innerHTML = a_date.uniformDateTime(3);
    }
}

// Moodle Database Activity Javascript Template Function
// Name: formatMultimediaList
// Description: Shortens the MM for the list view
function formatMultimediaList() {
    // Grab all URL and all Titles of posts
    var multimedia = document.getElementsByClassName('multimedia');

    // Loop through and process post/comment.
    for (var i = 0; i < multimedia.length; i++) {
        var media = multimedia[i].innerHTML;
        multimedia[i].innerHTML = '0';
        if ( media.search('1') >= 0 ) { multimedia[i].innerHTML = '1'; }
        if ( media.search('2') >= 0 ) { multimedia[i].innerHTML = '2'; }
        if ( media.search('3') >= 0 ) { multimedia[i].innerHTML = '3+'; }
    }
}

// Moodle Database Activity Javascript Template Function
// Name: formatBlogLinksList
// Description: Loops through all the URLs on the page and formats them
// with a title from the same line.
function formatBlogLinksList() {

    // Grab all URL and all Titles of posts
    var links = document.getElementsByClassName('postLink');
    var titles = document.getElementsByClassName('postTitle');

    // Loop through and process titles and URLs.
    for (var i = 0; i < titles.length; i++) {

        // Loop through and shorten titles if needed
        if (titles[i].innerHTML.length > 45) {
           titles[i].innerHTML = titles[i].innerHTML.substring(0, 45) + '...';
        }

        // Make sure we have an SSL connection
        var secure_link = links[i].childNodes[0].href;
        secure_link = secure_link.replace('http:', 'https:');
        links[i].childNodes[0].href = secure_link;

        // Verify the link and notify if it isn't valid!
        if (!validateURL(secure_link)) {
            title[i].innerHTML += ' <-- Invalid Link';
        }

        links[i].childNodes[0].innerHTML = titles[i].innerHTML;
        titles[i].innerHTML = '';
    }
}

// Moodle Database Activity Javascript Template Function
// Name: moveTotalsList
// Description: Determines where in the list view the posts end for a user
// and moves the totals line after the last post and before the first
// comment. Only does this for a single user.
function moveTotalsList() {
    var subtotalarea = document.getElementsByClassName('postSubtotalArea');
    var postcomment = document.getElementsByClassName('postcomment');
    var theuser = document.getElementsByClassName('theUser');

    var is_single_user = new Set;
    for (var i=0; i<theuser.length; i++) {
       is_single_user.add(theuser[i].childNodes[0].innerHTML);
    }

    // Move things only for single users
    if (is_single_user.size == 1) {
        first_comment = 0;
        for (var i=0; i<postcomment.length; i++) {
            if (first_comment == 0) {
                if (postcomment[i].innerHTML == 'C' ) {
                    first_comment = 1;
                    subtotalarea[i-1].innerHTML = document.getElementById('postTotal').innerHTML;
                    document.getElementById('postTotal').innerHTML = '';
                }
            }
        }
    }
}

// Moodle Database Activity Javascript Template Function
// Name: calculateScores
// Description: Calculates a score based on the post and the number
// of words that have been written. Only the best post on a day will
// be counted. Also, only the three best posts in the log will be counted.
// If all the posts have a multimedia item (at least one), then an extra
// bonus point will be added.
function calculateScores()
{
    var postcomment = document.getElementsByClassName('postcomment');
    var dateadded = document.getElementsByClassName('dateadded');
    var datereported = document.getElementsByClassName('datereported');
    var wordcount = document.getElementsByClassName('wordcount');
    var multmedia = document.getElementsByClassName('multimedia');
    var timespent = document.getElementsByClassName('timespent');
    var postpoints = document.getElementsByClassName('postpoints');

    // First, loop through and assign points to each post (not comment)
    for (var i=0; i<postcomment.length; i++) {
        if ( postcomment[i].innerHTML != 'C' ) {
            var words = parseInt(wordcount[i].innerHTML);
            var points = 0;
            if (words > 50) { points = points + 1; }
            if (words > 100) { points = points + 1; }
            if (words > 150) { points = points + 1; }
            postpoints[i].innerHTML = points;
        }
    }
}

// Moodle Database Activity Javascript Template Function
// Name: calculatePostTotals
// Description: Reviews the posts and totals them based
// on the rubric defined here.
function calculatePostTotals()
{
    var postcomment = document.getElementsByClassName('postcomment');
    var dateadded = document.getElementsByClassName('dateadded');
    var datereported = document.getElementsByClassName('datereported');
    var wordcount = document.getElementsByClassName('wordcount');
    var multimedia = document.getElementsByClassName('multimedia');
    var timespent = document.getElementsByClassName('timespent');
    var postpoints = document.getElementsByClassName('postpoints');

    // Determine unique days with the best possible score.
    var unique_datesadded = new Set;
    var unique_datesreported = new Set;
    var multimedia_reported = new Set;

    var totals_points = [];   // Stores the scores of the three best posts of the week
    var totals_dates = [];    // Stores the dates of the three best posts of the week

    var total_words = 0;
    var total_multimedia = 0;
    var total_time = 0;
    var total_points = 0;

    // Make unique sets of dates, multimedia
    // Also, count up totals
    for (var i=0; i<postcomment.length; i++) {
        if (postcomment[i].innerHTML != 'C') {
            // Fill the points array at first (but only 3 entries max)
            if (!unique_datesadded.has(dateadded[i].innerHTML)) {
                if (totals_points.length < 3) {
                    totals_dates.push(dateadded[i].innerHTML); // Add the date
                    totals_points.push(parseInt(postpoints[i].innerHTML)); // Add the score
                } else {
                    // Check to see if this new date is better than the old
                    for (j=0; j<totals_dates.length; j++) {
                        if (totals_points[j] < parseInt(postpoints[i].innerHTML)) {
                            totals_points[j] = parseInt(postpoints[i].innerHTML);
                            totals_dates[j] = dateadded[i].innerHTML; //Replace this date
                        }
                    }
                }
            } else { // Check to see if we have more points to add
                for (j=0; j<totals_dates.length; j++) {
                    if (totals_dates[j] == dateadded[i].innerHTML) {
                       // If we have this date already, take a better score if possible
                       if (totals_points[j] < parseInt(postpoints[i].innerHTML)) {
                           totals_points[j] = parseInt(postpoints[i].innerHTML);
                       }
                    }
                }
            }
            unique_datesadded.add(dateadded[i].innerHTML);
            unique_datesreported.add(datereported[i].innerHTML);
            multimedia_reported.add(multimedia[i].innerHTML);

            total_words += parseInt(wordcount[i].innerHTML);
            total_multimedia += parseInt(multimedia[i].innerHTML.replace('+',''));
            total_time += parseInt(timespent[i].innerHTML);
        }
    }

    // Sum the total for this log
    for (i=0; i<totals_points.length; i++) {
        total_points += totals_points[i]; // Sum up the best scores
    }
    if (!multimedia_reported.has('0') && totals_points.length == 3) {
        total_points += 1; // Add one for full MM usage
    }


    document.getElementById('totalpostlogged').innerHTML = unique_datesadded.size + ' day' + ((unique_datesadded.size != 1) ? 's' : '') + ' logged';
    document.getElementById('totalpostreported').innerHTML = unique_datesreported.size + ' day' + ((unique_datesreported.size != 1) ? 's' : '') + ' reported';
    document.getElementById('totalpostwordcount').innerHTML = total_words.toLocaleString() + ' word' + ((total_words != 1) ? 's' : '');
    document.getElementById('totalposttimespent').innerHTML = total_time.toLocaleString() + ' minute' + ((total_time != 1) ? 's' : '');
    document.getElementById('totalpostlogpoints').innerHTML = total_points.toLocaleString() + ' point' + ((total_points != 1) ? 's' : '') + ' total';
}

// Moodle Database Activity Javascript Template Function
// Name: calculateCommentTotals
// Description: Reviews the comments and totals them based
// on the rubric defined here.
function calculateCommentTotals()
{
    var postcomment = document.getElementsByClassName('postcomment');
    var dateadded = document.getElementsByClassName('dateadded');
    var datereported = document.getElementsByClassName('datereported');
    var wordcount = document.getElementsByClassName('wordcount');
    var multimedia = document.getElementsByClassName('multimedia');
    var timespent = document.getElementsByClassName('timespent');

    // Determine unique days with the best possible score.
    var unique_datesadded = new Set;
    var unique_datesreported = new Set;

    var total_words = 0;
    var total_time = 0;

    // Make unique sets of dates, multimedia
    // Also, count up totals
    for (var i=0; i<postcomment.length; i++) {
        if (postcomment[i].innerHTML == 'C') {
            unique_datesadded.add(dateadded[i].innerHTML);
            unique_datesreported.add(datereported[i].innerHTML);
            multimedia[i].innerHTML = ''; // Blank out MM since its a comment

            total_words += parseInt(wordcount[i].innerHTML);
            total_time += parseInt(timespent[i].innerHTML);
        }
    }

    document.getElementById('totalcommentlogged').innerHTML = unique_datesadded.size + ' day' + ((unique_datesadded.size != 1) ? 's' : '') + ' logged';
    document.getElementById('totalcommentreported').innerHTML = unique_datesreported.size + ' day' + ((unique_datesreported.size != 1) ? 's' : '') + ' reported';
    document.getElementById('totalcommentwordcount').innerHTML = total_words.toLocaleString() + ' word' + ((total_words != 1) ? 's' : '');
    document.getElementById('totalcommenttimespent').innerHTML = total_time.toLocaleString() + ' minute' + ((total_time != 1) ? 's' : '');
    document.getElementById('totalcommentlogpoints').innerHTML = ''; // Blank for now
}

// Moodle Database Activity Javascript Template Function
// Name: printDiv
// Description: This function creates a printable area from the page. Pass a div tag name
// and anything within those div tags will be selected for printing no matter
// how those things are formatted. Also, once the printing is completed,
// the page does a reload to reset any other JS functions that may have been
// upset in the process.
function printDiv(divName) {
     var printContents = document.getElementsByClassName(divName);
     var printMe = "";
     for (i = 0; i < printContents.length; i++) {
          printMe += printContents[i].innerHTML;
     }
     printMe += '<br>LANG=' + document.documentElement.lang;
     var originalContents = document.body.innerHTML;
     document.body.innerHTML = printMe;
     window.print();
     //document.body.innerHTML = originalContents;
     location.reload();
}
